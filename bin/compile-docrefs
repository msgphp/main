#!/usr/bin/env php
<?php

use MsgPhp\Domain\Event\DomainEventInterface;
use Twig\Environment;
use Twig\Loader\ArrayLoader;

if (!is_file('vendor/autoload.php')) {
    passthru('composer install --no-interaction --no-suggest', $return);
    if (0 !== $return) {
        exit($return);
    }
}

require 'vendor/autoload.php';

$msgphpGlobal = function(): array {
    $result = ['domains' => [], 'bundles' => []];
    foreach (glob('src/*/composer.json') as $file) {
        $package = json_decode(file_get_contents($file));
        $entry = ['path' => dirname($file), 'package' => $package];

        if ('-bundle' === substr($package->name, -7)) {
            $result['bundles'][$package->name] = $entry;
            continue;
        }

        $result['domains'][$package->name] = $entry + [
            'entities' => array_map(function (string $file): array {
                return [
                    'class' => $class = 'MsgPhp\\'.str_replace('/', '\\', substr($file, 4, -4)),
                    'abstract' => (new \ReflectionClass($class))->isAbstract(),
                ];
            }, glob(dirname($file).'/Entity/*.php')),
            'entity_fields' => array_map(function (string $file): string {
                return 'MsgPhp\\'.str_replace('/', '\\', substr($file, 4, -4));
            }, glob(dirname($file).'/Entity/Fields/*Field.php')),
            'entity_features' => array_map(function (string $file): string {
                return 'MsgPhp\\'.str_replace('/', '\\', substr($file, 4, -4));
            }, array_filter(glob(dirname($file).'/Entity/Features/*.php'), function (string $file): bool {
                return 'Abstract' !== substr(basename($file), 0, 8);
            })),
            'identifiers' => array_map(function (string $file): array {
                return [
                    'class' => $class = 'MsgPhp\\'.str_replace('/', '\\', substr($file, 4, -4)),
                    'scalar' => class_exists($scalar = substr($class, 0, -9)) ? $scalar : null,
                    'uuid' => class_exists($uuid = 'MsgPhp\\'.basename(dirname($file)).'\\Infra\\Uuid\\'.basename($file, 'Interface.php')) ? $uuid : null,
                ];
            }, glob(dirname($file).'/*IdInterface.php')),
            'repositories' => array_map(function (string $file): string {
                return 'MsgPhp\\'.str_replace('/', '\\', substr($file, 4, -4));
            }, glob(dirname($file).'/Repository/*RepositoryInterface.php')),
            'commands' => array_map(function (string $file): string {
                return 'MsgPhp\\'.str_replace('/', '\\', substr($file, 4, -4));
            }, glob(dirname($file).'/Command/*Command.php')),
            'events' => array_filter(array_map(function (string $file): string {
                return 'MsgPhp\\'.str_replace('/', '\\', substr($file, 4, -4));
            }, glob(dirname($file).'/Event/*Event.php')), function (string $class): bool {
                return !is_subclass_of($class, DomainEventInterface::class);
            }),
            'domain_events' => array_filter(array_map(function (string $file): string {
                return 'MsgPhp\\'.str_replace('/', '\\', substr($file, 4, -4));
            }, glob(dirname($file).'/Event/{*,Domain/*}Event.php', \GLOB_BRACE)), function (string $class): bool {
                return is_subclass_of($class, DomainEventInterface::class);
            }),
        ];
    }

    ksort($result['domains']);
    ksort($result['bundles']);

    $result['domains'] = [$k = 'msgphp/domain' => $result['domains'][$k]] + $result['domains'];

    return $result;
};

$getTemplate = function (string $file) use ($msgphpGlobal): array {
    $oldBaseDir = getcwd();
    chdir(dirname(__DIR__));
    extract(['msgphp' => $msgphpGlobal()]);
    $template = include $file;
    chdir($oldBaseDir);

    return $template;
};

$templates = $templateVars = [];
foreach (glob('docs/.refs/*.php') as $reference) {
    $vars = $getTemplate($reference);
    $templates[$name = basename($reference, '.php')] = array_shift($vars);
    $templateVars[$name] = $vars;
}

$twig = new Environment(new ArrayLoader($templates));
$twig->addGlobal('msgphp', $msgphpGlobal());
$replacements = [];

foreach (array_keys($templates) as $template) {
    $from = '~'.preg_quote($start = '<!--ref-start:'.$template.'-->', '~').'.*'.preg_quote($end = '<!--ref-end:'.$template.'-->', '~').'~s';
    $to = $start."\n".$twig->render($template, $templateVars[$template]).$end;
    $replacements[$from] = $to;
}

foreach (glob('docs/{*,**/*}.md', \GLOB_BRACE) as $file) {
    file_put_contents($file, preg_replace(array_keys($replacements), array_values($replacements), file_get_contents($file)));
}

echo "\e[34mCompiled templates\e[0m\n";
echo ' > '.implode("\n > ", array_keys($templates))."\n";
