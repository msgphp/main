<?php

declare(strict_types=1);

namespace MsgPhp\Domain\Tests;

use MsgPhp\Domain\DomainCollection;
use MsgPhp\Domain\Exception\DuplicateEntity;
use MsgPhp\Domain\Exception\EntityNotFound;
use MsgPhp\Domain\Tests\Fixtures\Entities;
use MsgPhp\Domain\Tests\Fixtures\TestDomainEntityRepository;
use MsgPhp\Domain\Tests\Fixtures\TestDomainId;
use PHPUnit\Framework\TestCase;

abstract class DomainEntityRepositoryTestCase extends TestCase
{
    /** @var array<int, class-string<Entities\BaseTestEntity>> */
    protected static $entityTypes = [
        Entities\TestEntity::class,
        Entities\TestPrimitiveEntity::class,
        Entities\TestCompositeEntity::class,
        Entities\TestDerivedEntity::class,
        Entities\TestDerivedCompositeEntity::class,
        Entities\TestParentEntity::class,
        Entities\TestChildEntity::class,
    ];

    /** @var bool */
    protected static $supportsAutoGeneratedIds = true;

    public function testFindAll(): void
    {
        $repository = static::createRepository(Entities\TestPrimitiveEntity::class);
        $entities = [
            $entity1 = Entities\TestPrimitiveEntity::create(['id' => new TestDomainId('1')]),
            $entity2 = Entities\TestPrimitiveEntity::create(['id' => new TestDomainId('2')]),
            $entity3 = Entities\TestPrimitiveEntity::create(['id' => new TestDomainId('3')]),
        ];

        $this->assertEntityCollectionEquals([], $repository->findAll());
        $this->assertEntityCollectionEquals([], $repository->findAll(1));
        $this->assertEntityCollectionEquals([], $repository->findAll(1, 1));
        $this->assertEntityCollectionEquals([], $repository->findAll(1, 0));
        $this->assertEntityCollectionEquals([], $repository->findAll(0, 10));
        $this->assertEntityCollectionEquals([], $repository->findAll(10, 10));

        static::flushEntities($entities);

        $this->assertEntityCollectionEquals($entities, $repository->findAll());
        $this->assertEntityCollectionEquals([$entity2, $entity3], $repository->findAll(1));
        $this->assertEntityCollectionEquals([$entity2], $repository->findAll(1, 1));
        $this->assertEntityCollectionEquals([$entity2, $entity3], $repository->findAll(1, 0));
        $this->assertEntityCollectionEquals($entities, $repository->findAll(0, 10));
        $this->assertEntityCollectionEquals([], $repository->findAll(10, 10));
        $this->assertEntityCollectionEquals([$entity1, $entity2], $repository->findAll(0, 2));
    }

    public function testFindAllByFields(): void
    {
        $repository = static::createRepository(Entities\TestCompositeEntity::class);
        $repository2 = static::createRepository(Entities\TestEntity::class);
        $entities = [
            $entity1 = Entities\TestCompositeEntity::create(['idA' => new TestDomainId('1'), 'idB' => 'foo']),
            $entity2 = Entities\TestCompositeEntity::create(['idA' => new TestDomainId('2'), 'idB' => 'foo']),
            $entity3 = Entities\TestCompositeEntity::create(['idA' => new TestDomainId('3'), 'idB' => 'bar']),
            $entity4 = Entities\TestEntity::create(['id' => new TestDomainId('1'), 'intField' => 1, 'boolField' => false]),
        ];

        $this->assertEntityCollectionEquals([], $repository->findAllByFields(['idA' => 1]));
        $this->assertEntityCollectionEquals([], $repository->findAllByFields(['idA' => '2']));
        $this->assertEntityCollectionEquals([], $repository->findAllByFields(['idA' => new TestDomainId()], 1));
        $this->assertEntityCollectionEquals([], $repository->findAllByFields(['idA' => [null, 'foo', new TestDomainId('2'), new TestDomainId('3')]], 1, 1));
        $this->assertEntityCollectionEquals([], $repository->findAllByFields(['idA' => [new TestDomainId('2'), new TestDomainId('1'), new TestDomainId()]], 1, 0));
        $this->assertEntityCollectionEquals([], $repository->findAllByFields(['idA' => [new TestDomainId('1'), new TestDomainId('3')]], 0, 10));
        $this->assertEntityCollectionEquals([], $repository->findAllByFields(['idB' => 'foo'], 0, 10));
        $this->assertEntityCollectionEquals([], $repository->findAllByFields(['idB' => 'bar'], 10, 10));
        $this->assertEntityCollectionEquals([], $repository->findAllByFields(['idB' => 'foo'], 0, 2));
        $this->assertEntityCollectionEquals([], $repository->findAllByFields(['idB' => 'foo']));
        $this->assertEntityCollectionEquals([], $repository->findAllByFields(['idA' => [1, '2'], 'idB' => 'foo']));
        $this->assertEntityCollectionEquals([], $repository->findAllByFields(['idA' => [1, '2'], 'idB' => 'foo'], 1));
        $this->assertEntityCollectionEquals([], $repository2->findAllByFields(['strField' => null]));
        $this->assertEntityCollectionEquals([], $repository2->findAllByFields(['strField' => '']));
        $this->assertEntityCollectionEquals([], $repository2->findAllByFields(['strField' => 'foo']));
        $this->assertEntityCollectionEquals([], $repository2->findAllByFields(['strField' => [null, 'foo']]));
        $this->assertEntityCollectionEquals([], $repository2->findAllByFields(['intField' => null]));
        $this->assertEntityCollectionEquals([], $repository2->findAllByFields(['intField' => '1']));
        $this->assertEntityCollectionEquals([], $repository2->findAllByFields(['intField' => [1, 2]]));

        static::flushEntities($entities);

        $this->assertEntityCollectionEquals([$entity1], $repository->findAllByFields(['idA' => 1]));
        $this->assertEntityCollectionEquals([$entity2], $repository->findAllByFields(['idA' => '2']));
        $this->assertEntityCollectionEquals([], $repository->findAllByFields(['idA' => new TestDomainId()], 1));
        $this->assertEntityCollectionEquals([$entity3], $repository->findAllByFields(['idA' => [new TestDomainId('2'), new TestDomainId('3')]], 1, 1));
        $this->assertEntityCollectionEquals([$entity2], $repository->findAllByFields(['idA' => [new TestDomainId('2'), new TestDomainId('1'), new TestDomainId()]], 1, 0));
        $this->assertEntityCollectionEquals([$entity1, $entity3], $repository->findAllByFields(['idA' => [new TestDomainId('1'), new TestDomainId('3')]], 0, 10));
        $this->assertEntityCollectionEquals([$entity3], $repository->findAllByFields(['idA' => new TestDomainId('3')], 0, 10));
        $this->assertEntityCollectionEquals([], $repository->findAllByFields(['idA' => new TestDomainId('2')], 10, 10));
        $this->assertEntityCollectionEquals([$entity1], $repository->findAllByFields(['idA' => new TestDomainId('1')], 0, 2));
        $this->assertEntityCollectionEquals([$entity1, $entity2], $repository->findAllByFields(['idB' => 'foo']));
        $this->assertEntityCollectionEquals([$entity1], $repository->findAllByFields(['idB' => 'foo'], 0, 1));
        $this->assertEntityCollectionEquals([$entity2], $repository->findAllByFields(['idB' => 'foo'], 1, 1));
        $this->assertEntityCollectionEquals([$entity1, $entity2], $repository->findAllByFields(['idA' => [1, '2'], 'idB' => 'foo']));
        $this->assertEntityCollectionEquals([$entity2], $repository->findAllByFields(['idA' => [1, '2'], 'idB' => 'foo'], 1));
        $this->assertEntityCollectionEquals([$entity4], $repository2->findAllByFields(['strField' => null]));
        $this->assertEntityCollectionEquals([], $repository2->findAllByFields(['strField' => '']));
        $this->assertEntityCollectionEquals([], $repository2->findAllByFields(['strField' => 'foo']));
        $this->assertEntityCollectionEquals([], $repository2->findAllByFields(['strField' => [null, 'foo']]));
        $this->assertEntityCollectionEquals([], $repository2->findAllByFields(['intField' => null]));
        $this->assertEntityCollectionEquals([$entity4], $repository2->findAllByFields(['intField' => '1']));
        $this->assertEntityCollectionEquals([$entity4], $repository2->findAllByFields(['intField' => [1, 2]]));
    }

    public function testFindAllByFieldsWithoutFields(): void
    {
        $repository = static::createRepository(Entities\TestEntity::class);

        $this->expectException(\LogicException::class);

        $repository->findAllByFields([]);
    }

    /**
     * @param class-string<Entities\BaseTestEntity> $class
     *
     * @dataProvider provideEntities
     */
    public function testFind(string $class, Entities\BaseTestEntity $entity, array $ids): void
    {
        $repository = static::createRepository($class);

        try {
            $repository->find($ids);

            self::fail();
        } catch (EntityNotFound $e) {
            $this->addToAssertionCount(1);
        }

        $this->loadEntities($entity);

        $this->assertEntityEquals($entity, $repository->find(Entities\BaseTestEntity::getPrimaryIds($entity)));
    }

    /**
     * @param class-string<Entities\BaseTestEntity> $class
     *
     * @dataProvider provideEntityFields
     */
    public function testFindByFields(string $class, array $fields): void
    {
        $repository = static::createRepository($class);

        try {
            $repository->findByFields($fields);

            self::fail();
        } catch (EntityNotFound $e) {
            $this->addToAssertionCount(1);
        }

        $entity = $class::create($fields);
        $this->loadEntities($entity);

        $this->assertEntityEquals($entity, $repository->findByFields($fields));
    }

    public function testFindByFieldsWithoutFields(): void
    {
        $repository = static::createRepository(Entities\TestEntity::class);

        $this->expectException(\LogicException::class);

        $repository->existsByFields([]);
    }

    public function testFindByFieldsWithPrimaryId(): void
    {
        $repository = static::createRepository(Entities\TestDerivedEntity::class);
        $entity = Entities\TestEntity::create([
            'intField' => -1,
            'boolField' => true,
        ]);
        $entity2 = Entities\TestEntity::create([
            'intField' => -1,
            'boolField' => true,
        ]);

        if (!static::$supportsAutoGeneratedIds) {
            $entity->setId(new TestDomainId(bin2hex(random_bytes(32))));
        } else {
            // https://github.com/doctrine/doctrine2/issues/4584
            $entity->setId(new TestDomainId('IRRELEVANT'));
        }

        static::flushEntities([$derivingEntity = Entities\TestDerivedEntity::create(['entity' => $entity]), $entity2]);

        self::assertFalse($entity->getId()->isNil());
        self::assertNotSame('IRRELEVANT', $entity->getId()->toString());
        $this->assertEntityEquals($derivingEntity, $repository->findByFields(['entity' => $entity->getId()]));
    }

    /**
     * @param class-string<Entities\BaseTestEntity> $class
     *
     * @dataProvider provideEntities
     */
    public function testExists(string $class, Entities\BaseTestEntity $entity, array $ids): void
    {
        $repository = static::createRepository($class);

        self::assertFalse($repository->exists($ids));

        $this->loadEntities($entity);

        self::assertTrue($repository->exists(Entities\BaseTestEntity::getPrimaryIds($entity)));
    }

    /**
     * @param class-string<Entities\BaseTestEntity> $class
     *
     * @dataProvider provideEntityFields
     */
    public function testExistsByFields(string $class, array $fields): void
    {
        $repository = static::createRepository($class);

        self::assertFalse($repository->existsByFields($fields));

        $entity = $class::create($fields);
        $this->loadEntities($entity);

        self::assertTrue($repository->existsByFields($fields));
    }

    public function testExistsByFieldsWithoutFields(): void
    {
        $repository = static::createRepository(Entities\TestEntity::class);

        $this->expectException(\LogicException::class);

        $repository->existsByFields([]);
    }

    public function testExistsByFieldsWithEmptyDomainId(): void
    {
        $repository = static::createRepository(Entities\TestDerivedEntity::class);
        $entity = Entities\TestEntity::create([
            'intField' => 0,
            'boolField' => true,
        ]);

        $this->loadEntities();

        $this->expectException(\LogicException::class);

        $repository->existsByFields(['entity' => $entity]);
    }

    /**
     * @param class-string<Entities\BaseTestEntity> $class
     *
     * @dataProvider provideEntities
     */
    public function testSave(string $class, Entities\BaseTestEntity $entity, array $ids): void
    {
        $repository = static::createRepository($class);

        self::assertFalse($repository->exists($ids));

        $repository->save($entity);

        if (!static::$supportsAutoGeneratedIds) {
            if ($entity instanceof Entities\TestEntity) {
                $entity->setId(new TestDomainId(bin2hex(random_bytes(32))));
            } elseif ($entity instanceof Entities\TestDerivedEntity) {
                $entity->entity->setId(new TestDomainId(bin2hex(random_bytes(32))));
            }
        }

        self::assertTrue($repository->exists(Entities\BaseTestEntity::getPrimaryIds($entity)));
    }

    public function testSaveUpdates(): void
    {
        $repository = static::createRepository(Entities\TestEntity::class);
        $entity = Entities\TestEntity::create([
            'intField' => 1,
            'floatField' => -1.23,
            'boolField' => false,
        ]);

        if (!static::$supportsAutoGeneratedIds) {
            self::assertFalse($entity->getId()->isNil());
        }

        $repository->save($entity);

        if (static::$supportsAutoGeneratedIds) {
            self::assertFalse($entity->getId()->isNil());
        }

        self::assertNull($entity->strField);
        self::assertSame(1, $entity->intField);
        self::assertSame(-1.23, $entity->floatField);
        self::assertFalse($entity->boolField);

        $entity->strField = 'foo';
        $entity->floatField = null;
        $entity->boolField = true;

        $repository->save($entity);

        $fresh = $repository->find(Entities\BaseTestEntity::getPrimaryIds($entity));

        self::assertFalse($fresh->getId()->isNil());
        self::assertSame('foo', $fresh->strField);
        self::assertSame(1, $fresh->intField);
        self::assertNull($fresh->floatField);
        self::assertTrue($fresh->boolField);
    }

    public function testSaveThrowsOnDuplicate(): void
    {
        $repository = static::createRepository(Entities\TestPrimitiveEntity::class);

        $repository->save(Entities\TestPrimitiveEntity::create(['id' => new TestDomainId('999')]));

        $this->expectException(DuplicateEntity::class);

        $repository->save(Entities\TestPrimitiveEntity::create(['id' => new TestDomainId('999')]));
    }

    /**
     * @param class-string<Entities\BaseTestEntity> $class
     *
     * @dataProvider provideEntities
     */
    public function testDelete(string $class, Entities\BaseTestEntity $entity): void
    {
        $repository = static::createRepository($class);

        static::flushEntities([$entity]);

        self::assertTrue($repository->exists($ids = Entities\BaseTestEntity::getPrimaryIds($entity)));

        $repository->delete($entity);

        self::assertFalse($repository->exists($ids));
    }

    /**
     * @return \Generator<int, array{0:class-string<Entities\BaseTestEntity>}>
     */
    public function provideEntityTypes(): iterable
    {
        foreach (static::$entityTypes as $class) {
            yield [$class];
        }
    }

    /**
     * @return \Generator<int, array{0:class-string<Entities\BaseTestEntity>,1:Entities\BaseTestEntity,2:array<string, mixed>,3:array}>
     */
    public function provideEntities(): iterable
    {
        foreach ($this->provideEntityTypes() as $class) {
            $class = $class[0];
            foreach ($class::createEntities() as $entity) {
                $primitiveIds = [];
                $ids = Entities\BaseTestEntity::getPrimaryIds($entity, $primitiveIds);

                yield [$class, $entity, $ids, $primitiveIds];
            }
        }
    }

    /**
     * @return \Generator<int, array{0:class-string<Entities\BaseTestEntity>,1:array}>
     */
    public function provideEntityFields(): iterable
    {
        foreach ($this->provideEntityTypes() as $class) {
            $class = $class[0];

            foreach ($class::getFields() as $fields) {
                yield [$class, $fields];
            }
        }
    }

    /**
     * @template T of object
     *
     * @param class-string<T> $class
     *
     * @return TestDomainEntityRepository<T>
     */
    abstract protected static function createRepository(string $class): TestDomainEntityRepository;

    /**
     * @param iterable<object> $entities
     */
    abstract protected static function flushEntities(iterable $entities): void;

    final protected function assertEntityCollectionEquals(array $expected, DomainCollection $actual): void
    {
        self::assertCount(\count($expected), $actual);

        $equals = true;
        foreach ($actual as $i => $entity) {
            if (!isset($expected[$i]) || !$this->equalsEntity($expected[$i], $entity)) {
                $equals = false;

                break;
            }
        }

        self::assertTrue($equals);
    }

    final protected function assertEntityEquals(object $expected, object $actual): void
    {
        self::assertSame(\get_class($expected), \get_class($actual));

        if (!$this->equalsEntity($expected, $actual)) {
            self::fail();
        } else {
            $this->addToAssertionCount(1);
        }
    }

    protected function equalsEntity(object $expected, object $actual): bool
    {
        $equals = true;
        foreach (($r = (new \ReflectionObject($expected)))->getProperties() as $property) {
            $property->setAccessible(true);
            $expectedValue = $property->getValue($expected);
            $actualValue = $property->getValue($actual);

            if (\is_object($expectedValue) && \is_object($actualValue)) {
                if (!$this->equalsEntity($expectedValue, $actualValue)) {
                    $equals = false;

                    break;
                }

                continue;
            }

            if ($expectedValue !== $actualValue) {
                $equals = false;

                break;
            }
        }

        return $equals;
    }

    private function loadEntities(Entities\BaseTestEntity ...$entity): void
    {
        $entities = [];
        foreach (\func_get_args() as $entity) {
            $primitiveIds = [];
            Entities\BaseTestEntity::getPrimaryIds($entity, $primitiveIds);
            $entities[serialize($primitiveIds)] = $entity;
        }

        foreach ($this->provideEntities() as $entity) {
            if (!isset($entities[$primitiveIds = serialize($entity[3])])) {
                $entities[$primitiveIds] = $entity[1];
            }
        }

        static::flushEntities($entities);
    }
}
