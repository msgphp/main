<?php

declare(strict_types=1);

namespace MsgPhp\Domain\Tests\Infra\InMemory;

use MsgPhp\Domain\{DomainId, DomainIdentityHelper};
use MsgPhp\Domain\Infra\InMemory\{DomainEntityRepositoryTrait, DomainIdentityMapping, GlobalObjectMemory};
use MsgPhp\Domain\Tests\AbstractDomainEntityRepositoryTraitTest;
use MsgPhp\Domain\Tests\Fixtures\{DomainEntityRepositoryTraitInterface, Entities};

final class DomainEntityRepositoryTraitTest extends AbstractDomainEntityRepositoryTraitTest
{
    protected static $supportsAutoGeneratedIds = false;

    /** @var GlobalObjectMemory */
    private static $memory;

    protected function setUp(): void
    {
        self::$memory = new GlobalObjectMemory();
    }

    protected function tearDown(): void
    {
        self::$memory = null;
    }

    protected static function createRepository(string $class): DomainEntityRepositoryTraitInterface
    {
        $mapping = [];
        foreach (self::$entityTypes as $knownClass) {
            $mapping[$knownClass] = $knownClass::getIdFields();
        }
        $identityHelper = new DomainIdentityHelper(new DomainIdentityMapping($mapping));

        return new class($class, $identityHelper, self::$memory) implements DomainEntityRepositoryTraitInterface {
            use DomainEntityRepositoryTrait {
                doFindAll as public;
                doFindAllByFields as public;
                doFind as public;
                doFindByFields as public;
                doExists as public;
                doExistsByFields as public;
                doSave as public;
                doDelete as public;
            }
        };
    }

    protected static function flushEntities(iterable $entities): void
    {
        foreach ($entities as $entity) {
            $testEntity = $entity instanceof Entities\TestDerivedEntity ? $entity->entity : $entity;

            if ($testEntity instanceof Entities\TestEntity && $testEntity->getId()->isEmpty()) {
                $testEntity->identify(new DomainId(bin2hex(random_bytes(32))));
            }

            self::$memory->persist($entity);
        }
    }
}
